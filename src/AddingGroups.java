import java.util.*;

public class AddingGroups {
    public static void main(String[] args) {
/*Создаём интерфейсную ссылку типа Collection и присваиваем ей новый экземпляр параметризованного ArrayList.  При этом
тип нашего объекта повышается (upcasting) до интерфейса Collection.
Этот экземпляр ArrayList создаётся с аргументом в виде объекта, реализующего интерфейс List (а значит, и интерфейс
Collection, т.к. интерфейс List реализует интерфейс Collection). Для этого класс ArrayList имеет специальный
конструктор, способный принимать в качестве аргумента любой объект, реализующий интерфейс Collection.
В свою очередь статический метод Arrays.asList в качестве аргумента получает либо массив, либо список элементов,
разделённых запятыми и возвращает объект, реализующий интерфейс List.*/
       // Единственный способ заполнить ArrayList при создании – создавать его с аргументом объектом типа Collection,
        // т.к. у ArrayList есть для этого специальный конструктор. Остальные два конструктора предназначены для
        // создания пустого ArrayList или ArrayList желаемой ёмкости. Однако такой способ довольно медленный.
               // Это справедливо и для большинства (если не всех) остальных контейнеров.
//Что происходит при повышении типа в этом случае?

        Collection<Integer> collection = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5));
/*Создаём и инициализируем массив объектов wrapper-класса. При этом производится автоупаковка примитивов в объекты-обёртки типа Integer.*/
        Integer[] moreInts = { 6, 7, 8, 9, 10 };
/*Добавляем в наш объект-контейнер все те объекты типа Integer, которые входят в массив moreInts. Для этого вызываем метод addAll класса ArrayLists (т.е. нашего объекта-контейнера), в качестве аргумента передаём ему объект, реализующий интерфейс List и содержащий список объектов типа Integer.
Статический метод asList класса Arrays принимает массив объектов типа Integer и возвращает объект, реализующий интерфейс List.*/
        collection.addAll(Arrays.asList(moreInts));
        // Работает намного быстрее, но таким способом
        // невозможно сконструировать Collection:
/*Статический метод addAll класса Collections получает в качестве аргументов объект типа Collection (и только этого типа!) и либо массив, либо список разделённый запятыми, и добавляет данные элементы в данный объект.*/
//В КАКОЙ МОМЕНТ ПРОИСХОДИТ АВТОУПАКОВКА???
        Collections.addAll(collection, 11, 12, 13, 14, 15);
        Collections.addAll(collection, moreInts);
        // Produces a list "backed by" an array:
/*Создаём интерфейсную ссылку типа List и присваиваем ей объект типа List (т.е. реализующий интерфейс List), возвращаемый статическим методом Arrays.asList. При этом получается контейнер фиксированного размера, в него нельзя добавить или удалить элемент.*/
        List<Integer> list = Arrays.asList(16, 17, 18, 19, 20);
        list.set(1, 99);// Можно - изменение элемента
        // list.add(21); // Ошибка времени выполнения - нижележащий
        // массив не должен изменяться в размерах
    }	//ЧТО ЗА НИЖЕЛЕЖАЩИЙ МАССИВ???
}
